{
	"name": "Dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "orders_source",
						"type": "DatasetReference"
					},
					"name": "ImportOrders"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "orders_source",
						"type": "DatasetReference"
					},
					"name": "ExportOrders"
				}
			],
			"transformations": [
				{
					"name": "Split"
				},
				{
					"name": "normalvalue"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          date as string,",
				"          value as string,",
				"          customer_id as string,",
				"          product_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> ImportOrders",
				"ImportOrders derive(intvalue = toInteger((substring(value, 2, length(value) - 4) + right(value, 2))),",
				"          currency = left(value, 1)) ~> Split",
				"Split derive(value = iif(equals(currency, \"$\"), toInteger(intvalue * 0.78), iif(equals(currency, \"â‚¬\"), toInteger(intvalue * 0.86), intvalue))) ~> normalvalue",
				"normalvalue select(mapColumn(",
				"          id,",
				"          date,",
				"          customer_id,",
				"          product_id,",
				"          intvalue",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     input(",
				"          id as string,",
				"          date as string,",
				"          value as string,",
				"          customer_id as string,",
				"          product_id as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> ExportOrders"
			]
		}
	}
}